#include <iostream>
#include <string>

template <typename T>
class NamedObject
{
public:
    NamedObject(const char* name, const T& value) : theName{name}, theObject{value} {}
    NamedObject(std::string name, const T& value) : theName{name}, theObject{value} {}
    void print() {std::cout << "Name: " << theName << ", Age: " << theObject << "\n";}
private:
    std::string theName;
    T theObject;
};

// no copy constructor or copy assignment defined, 
// so these will be automatically generated by the compiler if needed
// if there is at least one constructor (in this case there are two), 
// then no default constructor will be defined by the compiler

int main()
{
    NamedObject<int> p("Olive",10);
    p.print();
    NamedObject<int> s("Freddie",11);
    s.print();
    std::cout << "Calling copy constructor\n NamedObject<int> t(p)\n";
    NamedObject<int> t(p); // copy constructor will be generated by the compiler.
    t.print();
    NamedObject<int>* ptr = new NamedObject<int>{"peaches",5};
    p = s; // copy assignment will be generated by the compiler.
    std::cout << "Calling copy assignment \n p = s\n";
    p.print();
    std::cout << "Calling copy assignment \n t = *ptr\n";
    t = *ptr;
    t.print();
    // Compiler also generates destructor for both p, s and t.
}